---------- Complete guide to setting up the DWMS front end ----------

Credit to both of the following websites for providing great examples as well as a great starting point for this application. I would highly recommend reading through both articles to familiarize yourself with basic Angular concepts.
Angular CRUD Setup: https://www.sitepoint.com/angular-2-tutorial/
User Authentication: http://jasonwatmore.com/post/2016/09/29/angular-2-user-registration-and-login-example-tutorial#app-component-html

Install Node.js: Asynchronous open source server framework. Comes with the Node Package Mangager (NPM) which allows us to install desired tools. 
Documentation: https://nodejs.org/docs/latest-v7.x/api/
Download: https://nodejs.org/en/download/
Versioning Check:
	node -v
	npm -v

Install Angular CLI: A command line interface for Angular
Documentation: https://github.com/angular/angular-cli/wiki
			   https://www.sitepoint.com/ultimate-angular-cli-reference/
To install for global usage
	npm install -g angular-cli
Versioning Check:
	ng version

Generate the new application using Angular CLI.
This command generates all needed files to get started. Change directory to whichever folder your looking to use as your desired root.
	cd path/to/your/desired/directory/root
	ng new dwms-app

Change directories to the newly created root directory. This the actual
angular application root.
	cd ./dwms-app

Now we can start up our development server, which will be hosted on http://localhost:4200/
	ng serve


--- Useful Angular CLI commands ---
Using 'ng generate', will automatically add the values app.module.ts. Services registered in app.module are available to all components in the entire application.
	ng generate <type> <name> <--spec>
	-where type is of, component, service, class...
	-where name is whatever you want
	-where --spec specifies if you'd like a test file as well

Run the unit tests via cmd line, it will pull up and run in a browser.
	ng test


--- Code Implementation ---
Generate the class 'user.ts', which defines attributes of a user.
	generate class User --spec
	//Logic

Generate the service 'user.service.ts', which will control user CRUD (by default adds .spec)
	ng generate service User
	//Logic

Generate the service ''


--- MOCK REST API Back-End ---
Creates a json-server to set up a mock back end
	npm install json-server --save

Create the JSON database as a file called db.json locally in the root directory. Add the following mock data to db.json.
	{
	"users": [
		{
			"id": 1
			"username": "Tester01",
			"password": "password",
			"firstName": "John",
			"lastName": "Doe"
		},
		{
			"id": 2
			"username": "Tester02",
			"password": "password",
			"firstName": "Jack",
			"lastName": "Beanstalk"
		},
		{
			"id": 3
			"username": "Tester03",
			"password": "password",
			"firstName": "Jane",
			"lastName": "Doe"
		}
	]
	}

Add a script to package.json to start our back end
	    "scripts": {
  		...
  		"json-server": "json-server --watch db.json"
		}

Now we can launch our REST API, visible at localhost:3000
	npm run -json-server

Add the API url to both the envrionment files dev and prod.
	apiURL: 'http:localhost:3000'

Add a service to communicate with the REST API, the argument registers it as a provider in the Angular module defined in app.module.ts
	ng generate service Api --module app.module.ts

































